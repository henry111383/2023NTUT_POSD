=== Iterator ===
first()
next()
isCurrent()
isDone()
----

=== Visitor ===
Composite::accept(Visitor *visitor){
    visitor -> visitNode(this)
}
visitor::visitComposite(Composite * cs){
}
----

Composite

=== Builder ===


Abstrast Factory
Template Method
Factory Method

Triangle * isTri = dynamic_cast<Triangle*>(Composite) 

----
#include <sstream>
stringstream

ss.str(_input);
bool isDone() const {
        return ss.eof();
    }

double token;
ss >> token;

std::string token;
ss >> token;
---

=== Scanner ===
void setInput(std::string input){}
std::string nextToken(){}
double nextDouble(){}
bool isDone() const {
        return ss.eof();
    }
----

=== Parser ===
Parser(Scanner *scanner, Builder * builder) : _scanner(scanner), _builder(builder) {}
void parse() {}
std::list<Shape *> getShapes() {}
void setInput(std::string input) {}